@page "/"
@inject QAService QAService

<div class="row mb-2">
    <div class="col-10">
        <h3>Ask a Grammar Question</h3>
    </div>
    <div class="col-2">
        <NavLink class="btn btn-secondary float-end" href="/about">About</NavLink>
    </div>
</div>

<div class="row mb-2">
    <div class="col">
        <select class="form-select" @bind="selectedLevel">
            <option value="">All Levels</option>
            <option value="beginner">Beginner</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
        </select>
    </div>
    <div class="col">
        <input class="form-control" placeholder="Filter by Section (optional)" @bind="selectedSection" />
    </div>
</div>
<div class="row mb-2">
    <div class="col-11">
        <input class="form-control mb-2" @bind="query" placeholder="e.g. What is i‘rāb?" />
    </div>
    <div class="col-1">
        <button class="btn btn-primary" @onclick="Search" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm"> Loading...</span>
            }
            else
            {
                <text>Ask</text>
            }
        </button>
    </div>
</div>

@if (hasError)
{
    <div class="alert alert-danger mt-3">
        ⚠️ An error occurred while contacting the server. Please try again later.
    </div>
}

@if (result != null && result.Sources != null && result.Sources.Count > 0)
{
    <div class="alert alert-info mt-4">
        <h5>Answer</h5>
        <p style="white-space: pre-wrap; font-family: 'Scheherazade New', 'Amiri', serif;">
            @result.Answer
        </p>
    </div>

    <div class="card mt-3">
        <div class="card-header"><strong>Sources</strong></div>
        <ul class="list-group list-group-flush">
            @foreach (var s in result.Sources)
            {
                <li class="list-group-item">
                    <strong>@s.Section_Title</strong> — @s.Level, Page @s.Page
                </li>
            }
        </ul>
    </div>
}

@code {
    bool hasError = false;
    string? query;
    QAAnswer? result;
    bool isLoading = false;
    string? selectedLevel;
    string? selectedSection;

    async Task Search()
    {
        isLoading = true;
        hasError = false;
        result = null;
        if (string.IsNullOrWhiteSpace(query))
        {
            Console.Error.WriteLine("Query cannot be empty.");
            isLoading = false;
            return;
        }
        try
        {
            result = await QAService.GetAnswerAsync(query, selectedLevel, selectedSection);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error calling API: " + ex.Message);
            hasError = true;
        }

        isLoading = false;
    }
}
