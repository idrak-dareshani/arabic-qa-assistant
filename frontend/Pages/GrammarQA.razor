@page "/"
@inject QAService QAService

<h3>Ask a Grammar Question</h3>

<input class="form-control mb-2" @bind="query" placeholder="e.g. What is i‘rāb?" />
<button class="btn btn-primary" @onclick="Search" disabled="@isLoading">
    @if (isLoading) { <span class="spinner-border spinner-border-sm"></span>  }
    else { <text>Ask</text> }
</button>

@if (result != null && result.Sources != null && result.Sources.Count > 0)
{
    <div class="alert alert-info mt-4">
        <h5>Answer</h5>
        <p>@result.Answer</p>
    </div>

    <div class="card mt-3">
        <div class="card-header"><strong>Sources</strong></div>
        <ul class="list-group list-group-flush">
            @foreach (var s in result.Sources)
            {
                <li class="list-group-item">
                    <strong>@s.Section_Title</strong> — @s.Level, Page @s.Page
                </li>
            }
        </ul>
    </div>
}

@code {
    string ?query;
    QAAnswer ?result;
    bool isLoading = false;

    async Task Search()
    {
        isLoading = true;
        result = null;
        if (string.IsNullOrWhiteSpace(query))
        {
            Console.Error.WriteLine("Query cannot be empty.");
            isLoading = false;
            return;
        }
        try
        {
            result = await QAService.GetAnswerAsync(query);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error calling API: " + ex.Message);
        }

        isLoading = false;
    }
}
